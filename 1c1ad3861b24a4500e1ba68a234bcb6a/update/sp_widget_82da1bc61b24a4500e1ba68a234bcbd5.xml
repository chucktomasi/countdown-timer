<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[api.controller=function($scope, $interval, $window) {
	/* widget controller */
	var c = this;

	$interval(function(){ 
		c.data.display.timeout--;
		if (c.data.display.timeout == 0 ) {
			console.log('Timer expired');
		} else {
			c.data.label = {
				"day" : "Day",
				"hour" : "Hour",
				"minute" : "Min",
				"second" : "Sec"
			};
			var d = Math.floor(c.data.display.timeout / (3600*24));
			var h = Math.floor(c.data.display.timeout % (3600*24) / 3600);
			var m = Math.floor(c.data.display.timeout % 3600 / 60);
			var s = Math.floor(c.data.display.timeout % 60);

			if (d != 1) {
				c.data.label.day += 's';
			}

			if (h != 1) {
				c.data.label.hour += 's';
			}

			if (m != 1) {
				c.data.label.minute += 's';
			}

			if (s != 1) {
				c.data.label.second += 's';
			}

			c.data.display.days = d;
			c.data.display.hours = ("00" + h).slice(-2);
			c.data.display.minutes = ("00" + m).slice(-2);
			c.data.display.seconds = ("00" + s).slice(-2);

		}
	}, 1000, c.data.display.timeout);
	
	$scope.openPage = function(item) {
		console.log(JSON.stringify(item, null, 4));
		$window.location.href = '?id=countdown&p=' + item.id;
	}
};]]></client_script>
        <controller_as>c</controller_as>
        <css>.tableList {
  background-color : white;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>false</has_preview>
        <id>countdown</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Countdown</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */
	/* e.g., data.table = $sp.getValue('table'); */

	data.mode = 'list';
	data.display = {
		"days" : 0,
		"hours" : "00",
		"minutes" : "00",
		"seconds" : "00",
		"date" : {
			"targetDateStr" : "2020-11-21 19:00:00",
			"targetValue" : 0
		},
		"timeout" : 0,
		"showTitle" : true,
		"showSubtitle" : true,
		"showLabels" : true
	};
	data.style = {};

	var targetDate = new GlideDateTime();

	var pageID = $sp.getParameter('p') || '';
	if (pageID == '') {
		data.mode = 'list';
		data.table = [];
		var pageListGr = new GlideRecord('x_orb_timer_page');
		pageListGr.orderBy('name');
		pageListGr.addEncodedQuery('date_time>javascript:gs.endOfCurrentMinute()');
		pageListGr.query();

		while (pageListGr.next()) {
			var obj = {
				"name" : pageListGr.getDisplayValue(),
				"id" : pageListGr.getUniqueValue(),
				"date" : pageListGr.date_time.getDisplayValue()
			};

			data.table.push(obj);

		}
	} else {

		data.mode = 'count';
		var pageGr = new GlideRecord('x_orb_timer_page');
		if (pageGr.get(pageID)) {
			var cType = pageGr.getValue('type');
			if (cType == 'date') {			
				data.display.date.targetDateStr = pageGr.date_time.getDisplayValue();
			} else {
				data.display.date.targetDateStr = pageGr.getValue('duration');
			}

			console.log('SS: date=' + data.display.date.targetDateStr);

			data.style.main = {
				"margin" : "auto",
				"background-color" : pageGr.getValue('background_color')
			};

			var tableWidth = parseInt(pageGr.getValue('table_width'), 10);

			data.style.table = {
				"width" : tableWidth,
				"border-spacing" : pageGr.getValue('table_spacing'),
				"table-layout" : "fixed",
				"border-collapse": "separate",
				"margin" : "0 auto"
			};

			var digitBorderWidth = pageGr.getValue('digit_border_width');
			var digitBorderColor = pageGr.getValue('digit_border_color');
			data.style.digit = {
				"font-size" : pageGr.getValue('digit_font_size'),
				"border" : digitBorderWidth + " " + digitBorderColor + " solid",
				"border-radius" : "10px",
				"text-align" : "center",
				"padding" : "0px 5px 0px 5px",
				"background-color" : pageGr.getValue('digit_background'),
				"color" : pageGr.getValue('digit_color'),
				"font-family" : "Impact"
			};

			data.style.tableDiv = {
				"display" : "inline-block",
				"text-align" : "center",
				"width" : tableWidth,
				"position" : "relative",
				"top" : pageGr.getValue('y_position') + "px",
				"left" : pageGr.getValue('x_position') + "px"
			};

			data.display.showLabels = pageGr.getValue('show_labels') == "1";

			if (data.display.showLabels) {
				data.style.label = {
					"color" : pageGr.getValue('label_color'),
					"font-size" : pageGr.getValue('label_font_size'),
					"background-color" : pageGr.getValue('label_background'),
					"font-family" : pageGr.getValue('label_font'),
					"text-align" : "center"
				};
				switch (pageGr.getValue('label_style')) {
					case 'italic':
						data.style.label["font-style"] = "italic";
						break;

					case 'bold':
						data.style.label["font-weight"] = "bold";
						break;
				}				
			}

			data.display.showTitle = pageGr.getValue('show_title') == "1";

			if (data.display.showTitle) {
				data.display["title"] = pageGr.getValue('title');
				data.style.title = {
					"color" : pageGr.getValue('title_color'),
					"background-color" : pageGr.getValue('title_background'),
					"font-family" : pageGr.getValue('title_font'),
					"font-size" : pageGr.getValue('title_font_size')
				}
				switch (pageGr.getValue('title_style')) {
					case 'italic':
						data.style.title["font-style"] = "italic";
						break;

					case 'bold':
						data.style.title["font-weight"] = "bold";
						break;
				}				
			}

			data.display.showSubtitle = pageGr.getValue('show_subtitle') == "1";

			if (data.display.showSubtitle) {
				data.display["subtitle"] = pageGr.getValue('subtitle');
				data.style.subtitle = {
					"color" : pageGr.getValue('subtitle_color'),
					"background-color" : pageGr.getValue('subtitle_background'),
					"font-family" : pageGr.getValue('subtitle_font'),
					"font-size" : pageGr.getValue('subtitle_font_size')
				}
				switch (pageGr.getValue('subtitle_style')) {
					case 'italic':
						data.style.subtitle["font-style"] = "italic";
						break;

					case 'bold':
						data.style.subtitle["font-weight"] = "bold";
						break;
				}				
			}
			// Now get the image URL
			var imageGr = new GlideRecord('sys_attachment');
			imageGr.addQuery('table_name', 'ZZ_YYx_orb_timer_page');
			imageGr.addQuery('file_name', 'background_image');
			imageGr.addQuery('table_sys_id', pageGr.getUniqueValue());
			imageGr.query();
			console.log('q=' + imageGr.getEncodedQuery());
			if (imageGr.next()) {
				data.style.main = {
					"background-image" : "url('" + imageGr.getUniqueValue() + ".iix')",
					"height" : imageGr.getValue('image_height'),
					"width" : imageGr.getValue('image_width')
				};
			}
			if (cType == 'date') {

				targetDate.setDisplayValue(data.display.date.targetDateStr);
				var tdNum = targetDate.getNumericValue();
				var now = new GlideDateTime();
				var nowNum = now.getNumericValue();

				if (nowNum < tdNum) {
					data.display.timeout = parseInt((tdNum - nowNum) / 1000, 10);
				}
			} else {
				var gdt = new GlideDateTime();
				gdt.setValue(data.display.date.targetDateStr);
				data.display.timeout = parseInt(gdt.getNumericValue(), 10) / 1000;
			}

		} else {
			gs.addErrorMessage('Cannot load page');
			return;
		}
	}


})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>chuck.tomasi</sys_created_by>
        <sys_created_on>2020-11-19 20:56:09</sys_created_on>
        <sys_id>82da1bc61b24a4500e1ba68a234bcbd5</sys_id>
        <sys_mod_count>87</sys_mod_count>
        <sys_name>Countdown</sys_name>
        <sys_package display_value="Countdown Timer" source="x_orb_timer">1c1ad3861b24a4500e1ba68a234bcb6a</sys_package>
        <sys_policy/>
        <sys_scope display_value="Countdown Timer">1c1ad3861b24a4500e1ba68a234bcb6a</sys_scope>
        <sys_update_name>sp_widget_82da1bc61b24a4500e1ba68a234bcbd5</sys_update_name>
        <sys_updated_by>chuck.tomasi</sys_updated_by>
        <sys_updated_on>2021-05-09 18:54:29</sys_updated_on>
        <template><![CDATA[<div ng-style="c.data.style.main">

  <div class="tableList" ng-if="c.data.mode == 'list'">
    <table class="table table-striped">
      <thead>
        <tr>
          <th>
            ${Name}
          </th>
          <th>
            ${Date/time}
          </th>
        </tr>
      </thead>
      <tbody>
        <tr ng-repeat="row in c.data.table" ng-click="openPage(row)">
          <td>
            {{row.name}}
          </td>
          <td>
            {{row.date}}
          </td>
        </tr>
      </tbody>
    </table>

  </div>

  <!--

<div class="container" ng-show="c.data.showContainer">
<sp-date-picker
field="data.startDate"
ng-model="data.startDate"
sn-include-time="true"
sn-change="dateChanged()">
</sp-date-picker>
</div>
-->
  <div ng-style="c.data.style.tableDiv" ng-if="c.data.mode == 'count'">
    <center>
      <div ng-style="c.data.style.title" ng-if="data.display.showTitle">
        {{c.data.display.title}}
      </div>
      <div ng-style="c.data.style.subtitle" ng-if="data.display.showSubtitle">
        {{c.data.display.subtitle}}
      </div>
    </center>

    <section style="display:table;" ng-style="c.data.style.table">
      <header style="display:table-row;">
        <div style="display: table-cell;" ng-style="c.data.style.digit">
          {{c.data.display.days}}
        </div>
        <div style="display: table-cell;" ng-style="c.data.style.digit">
          {{c.data.display.hours}}
        </div>
        <div style="display: table-cell;" ng-style="c.data.style.digit">
          {{c.data.display.minutes}}
        </div>
        <div style="display: table-cell;" ng-style="c.data.style.digit">
          {{c.data.display.seconds}}
        </div>
      </header>
      <header style="display:table-row;" ng-if="c.data.display.showLabels">
        <div style="display: table-cell;" ng-style="c.data.style.label">
          {{c.data.label.day}}
        </div>
        <div style="display: table-cell;" ng-style="c.data.style.label">
          {{c.data.label.hour}}
        </div>
        <div style="display: table-cell;" ng-style="c.data.style.label">
          {{c.data.label.minute}}
        </div>
        <div style="display: table-cell;" ng-style="c.data.style.label">
          {{c.data.label.second}}
        </div>
      </header>
    </section>
  </div>

</div>]]></template>
    </sp_widget>
</record_update>
